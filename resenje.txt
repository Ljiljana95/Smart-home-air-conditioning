#include <iostream>
#include <stdio.h>
#include <mosquitto.h>
#include <wiringPi.h>
#include <stdlib.h>
#include <string.h>

//gcc main.cpp -L /lib/libmoquitto.so -lmosquitto -lstdc++ -lwiringPi

using namespace std;

double buffer;
int i = 0;
int j = 0;
double const temp= 31;
int prekidac;
int mag;
int stanje; //stanje klime




#define PIN 22


void my_message_callback(struct mosquitto *mosq, void *userdata, const struct mosquitto_message *message)
{	
if(message->payloadlen)
{ 	
	if(strcmp(message->topic,"SensorValue--EnO_01834685")==0) //Da li ima poruku od temperature
	{
				//cout<< endl <<"Stigla je poruka od temperature!"<<endl;			
				buffer = atoi((char*)message->payload);
	}
	if(strcmp(message->topic,"SensorValue--EnO_0029E357")==0) //Da li ima poruku od switcha
	{
				//cout<< endl <<"Stigla je poruka od swicha!"<<endl;			
				prekidac = strcmp((char*)message->payload,"BI");
	}
	if(strcmp(message->topic,"SensorValue--EnO_01810977")==0) //Da li ima poruku od magneta
	{
				//cout<< endl <<"Stigla je poruka od magneta!"<<endl;			
				mag = strcmp((char*)message->payload,"closed");
	}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
if(buffer>=temp) 	//ako je temperatura veca od zeljene - treba upaliti klimu 
{
	if(stanje==1) //klima je vec bila upaljena
	{
		if(mag==0) //prozor je zatvoren
		{

			cout<<endl<<"Temperatura je visoka, prozor je zatvoren i klima vec radi! Sve je OK! "<<endl;
						
		}
		else	//prozor se otvori - gasi se klima 
		{
			stanje=0;
			digitalWrite(PIN,0);
			//delay(5000);
			cout<<endl<<"Temperatura je visoka! Zatvori prozor, gasimo klimu!"<<endl;
		}
	}
	else	// klima nije bila upaljena
	{
		if(mag==0)  //prozor je zatvoren - treba da se upali klima
		{
			stanje=1;
			digitalWrite(PIN,1);
			//delay(5000);
			cout<<endl<<"Temperatura je visoka, prozor je zatvoren ali klima nije radila pa se pali!"<<endl;
		}
		else 	//prozor se otvori - klima se gasi
		{
			cout<<endl<<"Temperatura je visoka, prozor je otvoren i klima ne radi! Zatvori prozor da bi upalio klimu "<<endl;
		}
	}
}
else		//ako je temperatura manja od zeljene - treba ugasiti klimu
{
	if(stanje==1) 	//klima je vec bila upaljena
	{
		if(prekidac==0) //korisnik je pritisnuo taster da se upalii klima - klima nastavlja da radi
		{
			if(mag==0) //prozor je zatvoren
			{
				cout<<endl<<"Temperatura je niska, prozor je zatvoren i klima vec radi zbog korisnika! Sve je OK! "<<endl;
			}
			else //prozor je otvoren - gasi se sklima
			{
				stanje=0;
				digitalWrite(PIN,0);
				//delay(5000);
				cout<<endl<<"Temperatura je niska! Otvoren je prozor, gasimo klimu!"<<endl;
			}
		}
		else // korisnik zahteva da se ugasi klima (prekidac = 1) - klima se gasi
		{
			stanje=0;
			digitalWrite(PIN,0);
			delay(5000);
			cout<<endl<<"Temperatura je niska! Klima je radila ali je ugasena jer korisniku ne treba!"<<endl;
		}
	
	}
	else	// klima nije bila upaljena
	{
		if(prekidac==0) // korisnik pali klimu
		{
			if(mag==0) //ako je prozor zatvorenh - pali se klima
			{
				stanje=1;
				digitalWrite(PIN,1);
				//delay(5000);
				cout<<endl<<"Temperatura je niska, prozor je zatvoren ali klima nije radila pa se pali!"<<endl;
			}
			else //prozor se otvara pa se klima gasi
			{
				cout<<endl<<"Temperatura je niska, prozor je otvoren i klima ne radi! Zatvori prozor da bi upalio klimu "<<endl;
			}
			
		}
		else //korisnik zeli da ugasi klimu-klima se gasi
		{
			cout<<endl<<"Temperatura je niska, korisnik ne zahteva klimu i ona vec ne radi! Sve je OK! "<<endl;
		}
		
	}
	
}
}
	fflush(stdout);
}

void my_connect_callback(struct mosquitto *mosq, void *userdata, int result)
{
	int i;
	if(!result){
		/* Subscribe to broker information topics on successful connect. */

		mosquitto_subscribe(mosq, NULL, "SensorValue--EnO_0029E357", 2); 	//switch B
		mosquitto_subscribe(mosq, NULL, "SensorValue--EnO_01834685", 2);	//temp
		mosquitto_subscribe(mosq, NULL, "SensorValue--EnO_01810977", 2);  	//magnet
	}else{
		fprintf(stderr, "Connect failed\n");
	}
}

void my_subscribe_callback(struct mosquitto *mosq, void *userdata, int mid, int qos_count, const int *granted_qos)
{
	int i;
	//printf("Subscribed (mid: %d): %d", mid, granted_qos[0]);
	for(i=1; i<qos_count; i++){
		//printf(", %d", granted_qos[i]);
	}
	printf("\n");
}

void my_log_callback(struct mosquitto *mosq, void *userdata, int level, const char *str)
{
	/* Pring all log messages regardless of level. */
	//printf("%s\n", str);
}

int main(int argc, char *argv[])
{	 
 	cout << endl << "Program za regulaciju temperature u  prostoriji:" << endl;

	int i;
	char *host = "localhost";
	int port = 1883;
	int keepalive = 60;
	bool clean_session = true;
	struct mosquitto *mosq = NULL;
	
	if (wiringPiSetup () == -1)
		return 1 ; 
  	pinMode ( PIN , OUTPUT) ; 	

	mosquitto_lib_init();
	mosq = mosquitto_new(NULL, clean_session, NULL);
	if(!mosq){
		fprintf(stderr, "Error: Out of memory.\n");
		return 1;
	}
	mosquitto_log_callback_set(mosq, my_log_callback);
	mosquitto_connect_callback_set(mosq, my_connect_callback);
	mosquitto_message_callback_set(mosq, my_message_callback);
	mosquitto_subscribe_callback_set(mosq, my_subscribe_callback);

	if(mosquitto_connect(mosq, host, port, keepalive)){
		fprintf(stderr, "Unable to connect.\n");
		return 1;
	}

	mosquitto_loop_forever(mosq, -1, 1);

	mosquitto_destroy(mosq);
	mosquitto_lib_cleanup();
	return 0;
}